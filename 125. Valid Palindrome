class Solution {
public:
    bool isPalindrome(string s) {
        
        string copy;
        
        change(s,copy);
        int low = 0 ,high = copy.size()-1;
        while(low < high)
        {
            if(copy[low++] != copy[high--])
                return false ;
        }
        return true;
    }
private:
    void change(const string &s,string &copy)
    {
        
        for(int i = 0 ; i < s.size() ; i++)
        {
            if(s[i] >= 'A' && s[i] <= 'Z')
            {
                copy.push_back( s[i] +( 'a'-'A' ) );
            }
            
            else if(ispunct(s[i]) || isspace(s[i]) )
                continue;
            else 
                copy.push_back( s[i] );
        }
    }
};
//////////////////////////////也可以边比较边转换 利用isalnum()函数
bool isPalindrome(string s) {
    for (int i = 0, j = s.size() - 1; i < j; i++, j--) { // Move 2 pointers from each end until they collide
        while (isalnum(s[i]) == false && i < j) i++; // Increment left pointer if not alphanumeric
        while (isalnum(s[j]) == false && i < j) j--; // Decrement right pointer if no alphanumeric
        if (toupper(s[i]) != toupper(s[j])) return false; // Exit and return error if not match
    }
    
    return true;
}
