class Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int,int> map_num;
        int max = INT_MIN;
        int max_num;
        for(int i = 0 ; i < nums.size() ; i++)
        {
            auto ret =  map_num.insert({nums[i],1});
            if(!ret.second)
                ++ret.first->second;
        }
        auto map_i = map_num.cbegin();
        while(map_i != map_num.cend())
        {
            if(max < map_i -> second )
            {
                max = map_i -> second;
                max_num = map_i -> first;
            }
            map_i ++ ;
        }
        
        return max_num;
    }
};
////////////////////////////////////////////////////////////////////
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int, int> counts; 
        int n = nums.size();
        for (int i = 0; i < n; i++)
            if (++counts[nums[i]] > n / 2)
                return nums[i];
    }
}
//////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        nth_element(nums.begin(), nums.begin() + nums.size() / 2, nums.end());
        return nums[nums.size() / 2];
    } 
};
