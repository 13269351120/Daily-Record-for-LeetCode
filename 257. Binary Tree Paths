/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 //此题需要遍历二叉树的所有根节点到叶节点的路径，最基本的想法是深度优先搜索，但是自己做题的时候有一些细节处理的不好
 //1.搜索顺序：一开始仅仅在左右孩子均不存在时才将答案push入，但是会遇到左孩子不存在，右孩子存在的情况，所以这样的递归是没有意义的
 //解决方案是：在进入递归时就应该判断其是否存在，而且应该迅速把这个结点的值存进去，而不是在递归的时候存
 //2.输出格式：C++有to_string()函数
 //["1->2->5", "1->3"]
 
 class Solution
 {
    public:
      vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> result;
        if(!root) return result;   //处理根节点不存在的情况
        dfs(root,result,to_string(root->val));
        return result;
      }
      private:
      void dfs(TreeNode *root , vector<string> &result , string solution)  //这里一开始我把string的接口设置成了string &solution
                                                                           //这样还需要在返回时删除最后一个数据，比较麻烦
      {
          if(!root->left && !root->right)
          {
              result.push_back(solution);
              return ;
          }
          if(root->left) //如果左孩子存在
            dfs(root->left,result,solution+"->"+to_string(root->left->val)); //马上将左孩子的值存入，而不是等到进入递归时再存入
           if(root->right)
            dfs(root->right,result,solution+"->"+to_string(root->right->val)); 
      }
 };
