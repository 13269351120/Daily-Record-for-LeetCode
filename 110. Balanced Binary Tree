/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(!root) return true;
        return (abs(height(root->left)-height(root->right))<2 && isBalanced(root->left) && isBalanced(root->right));
    }
private:
    int height(TreeNode *root)
    {
        if(!root) return 0 ;
        return max(height(root->left),height(root->right))+1;
    }
};

//////////////////////////////////////////////////////////////////////////
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
      return (DFS(root)!=-1);  
    }
private:
    int DFS(TreeNode *root)
    {
        if(!root) return 0 ;
        int leftHeight = DFS(root->left);
        if(leftHeight==-1) return -1 ;
        int rightHeight = DFS(root->right);
        if(rightHeight==-1) return -1 ;
        
        if(abs(leftHeight - rightHeight) > 1) return -1 ;
            
        return max(leftHeight,rightHeight)+1;
    }
};
